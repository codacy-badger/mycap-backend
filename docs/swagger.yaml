basePath: /api
definitions:
  response.HTTPError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  user.LoginUser:
    properties:
      email:
        example: dinopuguh@mycap.com
        type: string
      password:
        example: s3cr3tp45sw0rd
        type: string
    type: object
  user.RegisterUser:
    properties:
      email:
        example: dinopuguh@mycap.com
        type: string
      name:
        example: Dino Puguh
        type: string
      password:
        example: s3cr3tp45sw0rd
        type: string
      username:
        example: dinopuguh
        type: string
    type: object
  user.ResponseAuth:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/user.User'
        type: object
    type: object
  user.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      reached_time_limit:
        type: boolean
      remaining_time:
        type: integer
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: dinopuguh@gmail.com
    name: Dino Puguh
  description: This is an API for MyCap Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: MyCap API
  version: "1.0"
paths:
  /v1/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseAuth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.HTTPError'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.HTTPError'
      summary: User login
      tags:
      - auth
  /v1/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseAuth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.HTTPError'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.HTTPError'
      summary: Register a new user
      tags:
      - auth
  /v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.HTTPError'
      summary: Get all users
      tags:
      - user
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.HTTPError'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.HTTPError'
      summary: Remove user by ID
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
